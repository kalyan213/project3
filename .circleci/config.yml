version: 2.1
orbs:
 slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   workflow_id:
    #     type: string 
    steps:
      - run:
          name: revert config
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm install
              npm run migration:revert
            fi   
  install_awscli:
    description: install awscli v2
    steps:
      - run: 
          name: install awscli v2
          command: |
            sudo apt update && sudo apt upgrade
            sudo apt install curl 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install    
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            # Commenting the below   # npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test
            # commenting line 
            # npm audit fix --audit-level=critical --force                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm i
            npm run test
            # Commenting the below
            # npm audit fix --audit-level=critical --force            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli      
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            export BACKEND_SERVER_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "backend_serverIP = ${BACKEND_SERVER_IP}"
            echo ${BACKEND_SERVER_IP} >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: install dependencies
  #         command: |
  #           sudo apt-get install -y python3-pip
  #           sudo pip3 install awscli
  #     - run:
  #         name: run migrations
  #         command: |
  #           set -e
  #           cd backend
  #           # # npm install
  #           # # npm audit fix --audit-level=critical --force  
  #           # npm run migrations >> migration_output.txt
  #           # cat migration_output.txt
  #           npm install
  #           npm run build
  #           npm run migrations:revert        
  #           npm run migrations >> migrations_dump.txt
  #           cat migrations_dump.txt 
 
  #     - run:
  #         name: Send migration status to file
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #            echo "its successfully migrated - storing SUCCESS -> 1"
  #            curl -k https://kvdb.io/4QiN3eUegD4KU9qxnsccSB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi   
  #           echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migration

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend_buildtest]
      - run:
          name: install dependencies
          command: |
            sudo apt-get install -y python3-pip
            sudo pip3 install awscli     
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run build
            npm run migrations:revert        
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt         
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             echo "its successfully migrated - storing SUCCESS -> 1"
             curl -k https://kvdb.io/4QiN3eUegD4KU9qxnsccSB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi   
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migration

  smoke-test:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk update pip3
            pip3 install awscli
      - attach_workspace:
            at: ~/     
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
            echo ${BACKEND_IP}
            export URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test.
          command: |            
            URL="http://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}".s3-website-us-east-1.amazonaws.com"
            echo ${URL} 
            curl -s $URL | grep "Welcome"
            if curl -s $URL | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk update pip3
            pip3 install awscli
      - add_ssh_keys:
          fingerprints: ["71:9b:12:18:22:38:7c:a9:1d:1b:d4:11:fc:f2:e1:39"]
      - attach_workspace:
          at:  ~/ 
      - run: cat ~/project/.circleci/ansible/inventory.txt  
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            apk add --no-cache tar
            apk add --no-cache gzip
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache jq
            pip install awscli
      - run:
          name: Configure server
          command: | 
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat inventory.txt
            ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt  configure-server.yml

      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migration

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar, gzip and awscli
          command: |
            apk add openssh-client
            apk add tar gzip
            apk add --update --no-cache nodejs npm
            apk update pip3
            pip3 install awscli        
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --filters 'Name=tag:Name,Values=backend-*' \
                                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update openssh-client
            apk add --update tar gzip ansible nodejs npm curl zip
            apk update pip3
            pip3 install awscli
      - run:
          name: taring the backend file
          command: |
            touch .env
            echo ENVIROMENT=production > .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -lart
            cat .env
            mv .env backend
            tar -C backend -czvf artifact.tar.gz .
      - add_ssh_keys:
          fingerprints: [ "71:9b:12:18:22:38:7c:a9:1d:1b:d4:11:fc:f2:e1:39" ]
      - run:  
          name: invoke ansible script
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat inventory.txt
            ansible-playbook -vvvv -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - store_artifacts:
          path: ~/project/artifact.tar.gz
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migration
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: update cloud front distribution
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --stack-name InitialStack \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
             --tags project=udapeople    
             
            echo Current WorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration
  cleanup:
    docker:
      - image: amazon/aws-cli
    # steps:
    #   - checkout
    #   - run:
    #       name: Get old stack workflow id
    #       command: |
            # OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            # echo OLD_WORKFLOW_ID=${OLD_WORKFLOW_ID}
            # STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            # echo STACKS=${STACKS}
            # echo "Remove old stacks and files"
            # if [ -n "${OLD_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            # then
            #     echo deleting all files at S3 bucket udapeople-${OLD_WORKFLOW_ID}
            #     aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID}/ --recursive
            #     echo deleting stack udapeople-kalyan02
            #     aws cloudformation delete-stack --stack-name udapeople-kalyan02
            #     echo deleting stack udapeopleB
            #     aws cloudformation delete-stack --stack-name udapeople
            #   fi
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # fetch all stacks names   

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo Stack names: "${STACKS[@]}"    
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
            echo "=============delete confirmed======================="
            aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            echo "==============cannot cleanup========================"
            echo "no stacks found"
            fi        

      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migration 
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-backend:
#           requires: [run-migrations]
#       - deploy-frontend:
#           requires: [deploy-backend]
#       - smoke-test:
#           requires: [deploy-frontend, deploy-backend]
#       - cloudfront-update:
#           requires: [smoke-test]
      # - cleanup:
      #    requires: [cloudfront-update]


workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches: 
              only: [ dev-branch, master]
      - build-backend:
          filters:
            branches: 
              only: [ dev-branch, master]      
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches: 
              only: [ dev-branch, master]
      - test-backend:
          requires: [build-backend]
          filters:
            branches: 
              only: [ dev-branch, master]      
      - scan-frontend:      
          requires: [build-frontend]
          context: MyFirstPjtNotification
          filters:
            branches: 
              only: [ dev-branch, master]
      - scan-backend:      
          requires: [build-backend]
          context: MyFirstPjtNotification
          filters:
            branches: 
              only: [ dev-branch, master]  
      # - deploy-infrastructure :      
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches: 
      #         only: master
      # - configure-infrastructure :      
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches: 
      #         only: master
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches: 
      #         only: master
      # - deploy-frontend:      
      #     requires: [run-migrations]
      #     filters:
      #       branches: 
      #         only: master
      # - deploy-backend:
      #     requires: [run-migrations]
      #     filters:
      #       branches: 
      #         only: master
      # - smoke-test:      
      #     requires: [deploy-backend, deploy-frontend]
      #     filters:
      #       branches: 
      #         only: master   
      # - cloudfront-update:      
      #     requires: [smoke-test]
      #     filters:
      #       branches: 
      #         only: master  
